This is the standard README file for all Myriad based projects. In this 
document you will find a brief description of the directory layout, as well as 
a description of the necessary steps to build and install the 'graphgen' data 
generator.

In the following discussion, we refer to the set of core components comprising
the Myriad Toolkit as 'toolkit' and the set of toolkit extensions for the 
conrete data generator we want to build as 'data generator' or 'graphgen'.

DIRECTORY STRUCTURE
===================

The basic directory layout is as follows:

build/                     target folder for the data generator build process

src/                       graphgen data generator sources    
    config/                config files for the data generator
    cpp/                   C++ classes for the data generator

vendor/                    third party libraries and components
    myriad/                the myriad-toolkit sources             
        cpp/               C++ classes for the toolkit

EXTERNAL DEPENDENCIES
=====================

GNU Build Tools
---------------

In order to start the build process, first make sure you have 

* the 'build-essential' package (Ubuntu users)
* the 'Development Tools' package (RedHat users)
* the GNU C++ compiler 'g++' and 'make' (other Linux distributions)

installed on the system where you want to build the project.

POCO C++ Libraries
------------------

The Myriad Toolkit is built on top of the POCO C++ Libraries. Consequently, the 
build process depends on the following libraries:

libPocoFoundation.so
libPocoNet.so
libPocoUtil.so
libPocoXML.so

All libraries are part of the "Basic Edition" distribution package (version >= 
1.4.1p1) and can be obtained from here:

http://pocoproject.org/download/index.html

To ease deployment on parallel environments, the toolkit build bundles the 
shared object POCO libraries in the distribution package. To do this, the build 
system needs to know where the POCO Libraries are installed. 

For more information on the subject, please refer to the configuration options 
discussed in the next section. For a brief installation guide for the POCO C++ 
Libraries, please refer to Appendix A. at the end of this document.

Python
------

The parallel deployment script generated by the build process under 
'bin/graphgen-frontend' as well as some other utility scripts are written in 
Python. For those to work, you have to make sure that the build machine has 
Python >= 2.4.3 installed.


BUILDING ON UNIX/LINUX
======================

Log in to a terminal and type the following commands:

<graphgen-root>$ ./configure --prefix=<install-path> --poco-prefix=<poco-path>

The first option specifies the directory where data generator package will be 
installed after the build. We advise to use a path which is exported on a 
shared file system and is accessible from all nodes in your environment. This is 
convenient as otherwise you will have to manually copy the contents of the 
installation folder to all nodes in your distributed environment.

The second option specifies the installation path of the POCO C++ Libraries and 
should have the same value as the --prefix option configured when installing 
POCO.

For a full list of options type:

<graphgen-root>$ ./configure --help

Upon configuration, go to the 'build' folder and issue the following commands:

<graphgen-root>/build> make -s all
<graphgen-root>/build> make -s install

This should install the data generator under '<install-path>/graphgen'. In the 
remainder of this document, we will use <graphgen-install> as an alias to the 
graphgen install path '<install-path>/graphgen'.

RUNNING A SINGLE GENERATOR NODE
===============================

If you look at the contents of the '<graphgen-install>/bin' folder, you will 
find two files -- 'graphgen-frontend' and 'graphgen-node'. The first file is 
the CLI frontend to the simple parallel deployment script that comes bundled 
with the generator build and will be discussed in the next section. The second 
file is the C++ executable that represents a single data generator node. If you 
don't want to use the Python frontend, you will have to start your generator 
nodes manually or use some other parallel deployment container (e.g. a 
MapReduce engine like Hadoop). To start a parallel generation process manually,
you must first specify concrete values for the following parameters:

Parameter:      Meaning:

-s<SF>          Scaling factor of the generated dataset.

-N<N>           The total number of parallel instances (required by the 
                partitioning logic of each node).

-i<i>           The index ID of the current node. Index numbers are zero-based, 
                i.e. for <N> nodes you have to start instances with IDs from 0 
                to <N> - 1.

-o<PATH>        Base path for writing the output. The path should be accessible 
                from each node. For optimal I/O throughput, we recommend to 
                create the same path on the local storage of each host.

-m<DATASET_ID>  ID of the generated dataset. This affects the last part of the 
                path where the generated data is stored. 

Once the values for these parameters are specified, you can start node <i> of 
your <N>-node parallel generation setup manually by typing:

<graphgen-install>$ bin/graphgen-node -m<DATASET_ID> -s<SF> -i<i> -N<N> -o<PATH>

The data generator instance will store its output into the 
<PATH>/<DATASET_ID>/node<i> folder. The folder will contain a horizontal 
partition of each table in a separate text file. The logical concatenation of 
all node<i>/table.txt files represents the entire table. 


PARALLEL DATA GENERATION USING THE PYTHON FRONTEND
==================================================

If you want to use the Python parallel deployment frontend, you have to setup 
your parallel environment. For this purpose, you need to create a 
'graphgen-frontend.xml' inside the '<graphgen-install>/config' folder (you 
can use 'graphgen-config.template.xml' as a basis). The file has the following 
structure:

<?xml version="1.0" encoding="utf-8"?>
<myriad xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xmlns="http://www.dima.tu-berlin.de/myriad" 
        xsi:schemaLocation="http://www.dima.tu-berlin.de/myriad myriad-frontend.xsd">
  
  <!-- a set of cloud environments -->
  <cloud-environments>
    ...
  </cloud-environments>
  
  <!-- a set of data generator environments -->
  <dgen-configurations>
    ...
  </dgen-configurations>

</myriad>

Cloud Environments Configuration
--------------------------------

Let's start with the <cloud-enviroments> section. The section consists of a 
list of <cloud-env> elements, each one representing a single distributed 
computation environment. Each <cloud-env> defines of a list of slave hosts and 
a single master host. This is very similar to the contens of the `masters` 
and `slaves` files in Hadoop.

For instance, consider a scenario where you have a 10 node cluster but only 
want to use the first five nodes for the data generation process. This will 
translate into the following <cloud-env> entry:

<cloud-env id="mycloud-05" dgen="<graphgen-install>">
  <master>
    <host name="myhost01.example.com" />
  </master>
  <slaves>
    <host name="myhost01.example.com" />
    <host name="myhost02.example.com" />
    <host name="myhost03.example.com" />
    <host name="myhost04.example.com" />
    <host name="myhost05.example.com" />
  </slaves>
</cloud-env>

Now suppose that at some point you want to use all 10 nodes. You can add a 
second <cloud-env> to reflect this: 

<cloud-env id="mycloud-10" dgen="<graphgen-install>">
  <master>
    <host name="myhost01.example.com" />
  </master>
  <slaves>
    <host name="myhost01.example.com" />
    <host name="myhost02.example.com" />
    <host name="myhost03.example.com" />
    <host name="myhost04.example.com" />
    <host name="myhost05.example.com" />
    <host name="myhost06.example.com" />
    <host name="myhost07.example.com" />
    <host name="myhost08.example.com" />
    <host name="myhost09.example.com" />
    <host name="myhost10.example.com" />
  </slaves>
</cloud-env>

In other words, you can use the same different <cloud-env> elements to configure
multiple parallelization environments operating on the same network. The only 
requirements are:

* The master node can communicate with all the slave nodes through a 
  password-less ssh connection (similar to the Hadoop setup).
* The <graphgen-install> dir is accessible from all nodes (this is best 
  achieved through NFS exported install path).

Data Generator Configurations
-----------------------------

The <dgen-configurations> section defines a set of <dgen-config> entries used 
by the data generator. Each <dgen-config> entry represents a concrete way to 
use a specific cloud environment for parallel data generation. So if, for 
instance, we want to use the `mycloud-05` environment from above to run two 
data generator nodes per host, and we want to store the data generated by each 
node inside the '/data/myriad' local folder of the corresponding node, we have 
to add the following entry:

<dgen-config id="mycloud-10x4" cloud="mycloud-10">
  <nodes-per-host>4</nodes-per-host>
  <output-base>/data/myriad</output-base>
</dgen-config>

We recommend choosing a `nodes-per-host` value in the range [X,2X] where X is 
the number of processor cores in each host in the referenced environment. You 
can now start the parallel deployment script for a particular <DATASET_ID> and 
scaling factor <SF> with this command:

<graphgen-install>$ bin/graphgen-frontend -m<DATASET_ID> -s<SF> <DGEN-CONFIG-ID>


APPENDIX
========

A. Installing the POCO C++ Libraries
------------------------------ ------

For a straight forward installation of the POCO C++ Libraries issue the 
following commands in a terminal:

:~$ POCO_PATH = "~/etc" # or some other install path, typically "/usr/local"
:~$ tar -xzvf poco-<version>.tar.gz
:~$ cd poco-<version>
:~/poco-<version>$ ./configure --no-tests --no-samples --shared --prefix=$POCO_PATH
:~/poco-<version>$ make -s all install

If the installation is successful, you should see the POCO Libraries installed
under $POCO_PATH/lib:

:~/myriad$ ls -la $POCO_PATH/lib/libPoco*
$POCO_PATH/libPocoFoundationd.so
$POCO_PATH/libPocoFoundationd.so.11
$POCO_PATH/libPocoFoundation.so
$POCO_PATH/libPocoFoundation.so.11
$POCO_PATH/libPocoNetd.so
$POCO_PATH/libPocoNetd.so.11
$POCO_PATH/libPocoNet.so
$POCO_PATH/libPocoNet.so.11
$POCO_PATH/libPocoUtild.so
$POCO_PATH/libPocoUtild.so.11
$POCO_PATH/libPocoUtil.so
$POCO_PATH/libPocoUtil.so.11
$POCO_PATH/libPocoXMLd.so
$POCO_PATH/libPocoXMLd.so.11
$POCO_PATH/libPocoXML.so
$POCO_PATH/libPocoXML.so.11