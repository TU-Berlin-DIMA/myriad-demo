This is the INSTALL file for the Myriad Toolkit. In this document you will 
find a brief description of the directory layout, as well as a description of 
the necessary steps to build and install the tookit.

In the following discussion, we refer to the set of core components comprising
the Myriad Toolkit as 'toolkit' and the set of toolkit extensions for the 
conrete data generator implementation as 'data generator'

DIRECTORY STRUCTURE
===================

The basic directory layout is as follows:

build/                     target folder for the data generator build process

src/                       data generator sources    
    config/                config files for the data generator
    cpp/                   C++ classes for the data generator

vendor/                    third party libraries and components
    myriad/                the myriad-toolkit sources             
        cpp/               C++ classes for the toolkit

EXTERNAL DEPENDENCIES
=====================

GNU Build Tools
---------------

In order to start the build process, first make sure you have 

* the 'build-essential' package (Ubuntu users)
* the 'Development Tools' package (RedHat users)
* the GNU C++ compiler 'g++' and 'make' (other Linux distributions)

installed on the system where you want to build the project.

POCO C++ Libraries
------------------

The Myriad Toolkit is built on top of the POCO C++ Libraries. Consequently, the 
build process depends on the following libraries:

libPocoFoundation.so
libPocoNet.so
libPocoUtil.so
libPocoXML.so

All libraries are part of the "Basic Edition" distribution package (version >= 
1.4.1p1) and can be obtained from here:

http://pocoproject.org/download/index.html

To ease deployment on parallel environments, the toolkit build bundles the 
shared object POCO libraries in the distribution package. To do this, the build 
system needs to know where the POCO Libraries are installed. 

For more information on the subject, please refer to the configuration options 
discussed in the next section. For a brief installation guide for the POCO C++ 
Libraries, please refer to Appendix A. at the end of this document.

Python
------

The parallel deployment bin/<dgen>-frontend scripts generated by the build 
process as well as some of the utility scripts used for project bootstraping 
are written in Python. For those to work, you have to make sure that the build 
machine has Python >= 2.4.3 installed.


BUILDING ON UNIX/LINUX
======================

Log in to a terminal and type the following commands:

:~/<dgen-root>$ ./configure --prefix=<install_path> --poco-prefix=<poco_path>

The first option specifies the directory where data generator package will be 
installed after the build. We advise to use a path which is exported on a 
shared file system and is accessible from all nodes in your environment. This is 
convenient as otherwise you will have to manually copy the contents of the 
installation folder to all nodes in your distributed environment.

The second option specifies the installation path of the POCO C++ Libraries and 
should have the same value as the --prefix option configured when installing 
POCO.

For a full list of options type:

:~/<dgen-root>$ ./configure --help

Upon configuration, go to the 'build' folder and issue the following commands:

:~/<dgen-root>/build> make -s all
:~/<dgen-root>/build> make -s install

This should install the DGen under `<install_path>/myriad`. For further 
information on configuring and running the Myriad Toolkit, please refer to 
the README file in the installation folder.


APPENDIX
========

A. Installing the POCO C++ Libraries
------------------------------ ------

For a straight forward installation of the POCO C++ Libraries issue the 
following commands in a terminal:

:~$ POCO_PATH = "~/etc" # or some other install path, typically "/usr/local"
:~$ tar -xzvf poco-1.4.1p1.tar.gz
:~$ cd poco-1.4.1p1
:~/poco-1.4.1p1$ ./configure --no-tests --no-samples --shared --prefix=$POCO_PATH
:~/poco-1.4.1p1$ make -s all install

If the installation is successful, you should see the POCO Libraries installed
under $POCO_PATH/lib:

:~/myriad$ ls -la $POCO_PATH/lib/libPoco*
$POCO_PATH/libPocoFoundationd.so
$POCO_PATH/libPocoFoundationd.so.11
$POCO_PATH/libPocoFoundation.so
$POCO_PATH/libPocoFoundation.so.11
$POCO_PATH/libPocoNetd.so
$POCO_PATH/libPocoNetd.so.11
$POCO_PATH/libPocoNet.so
$POCO_PATH/libPocoNet.so.11
$POCO_PATH/libPocoUtild.so
$POCO_PATH/libPocoUtild.so.11
$POCO_PATH/libPocoUtil.so
$POCO_PATH/libPocoUtil.so.11
$POCO_PATH/libPocoXMLd.so
$POCO_PATH/libPocoXMLd.so.11
$POCO_PATH/libPocoXML.so
$POCO_PATH/libPocoXML.so.11